use master;
--------------------------------------------------------------
CREATE TABLE dbo.loginData (
	id INT IDENTITY PRIMARY KEY,
	data XML,
	program_name sysname
);
--------------------------------------------------------------
CREATE VIEW loginDataView
AS
SELECT id
      ,data.value('(/EVENT_INSTANCE/EventType)[1]', 'sysname') AS EventType
      ,data.value('(/EVENT_INSTANCE/PostTime)[1]', 'datetime') AS PostTime
      ,data.value('(/EVENT_INSTANCE/SPID)[1]', 'int') AS SPID
      ,data.value('(/EVENT_INSTANCE/ServerName)[1]', 'nvarchar(257)') AS ServerName
      ,data.value('(/EVENT_INSTANCE/LoginName)[1]', 'sysname') AS LoginName
      ,data.value('(/EVENT_INSTANCE/LoginType)[1]', 'sysname') AS LoginType
      ,data.value('(/EVENT_INSTANCE/SID)[1]', 'nvarchar(85)') AS SID
      ,data.value('(/EVENT_INSTANCE/ClientHost)[1]', 'sysname') AS ClientHost
      ,data.value('(/EVENT_INSTANCE/IsPooled)[1]', 'bit') AS IsPooled
      ,program_name
FROM loginData;
-------------------------------------------------------------- 
--drop trigger masoud_dba_afterlogon_trigger on all server;
--------------------------------------------------------------
CREATE TRIGGER masoud_dba_afterlogon_trigger
ON ALL SERVER WITH EXECUTE AS 'sa'
FOR LOGON
AS
BEGIN
	DECLARE @data XML
	DECLARE @allowed bool
	SET @data = EVENTDATA()
	 
	DECLARE @AppName sysname
		   ,@LoginName sysname
		   ,@LoginType sysname
	SELECT @AppName = [program_name]
	FROM sys.dm_exec_sessions
	WHERE session_id = @data.value('(/EVENT_INSTANCE/SPID)[1]', 'int')
	 
	SELECT @LoginName = @data.value('(/EVENT_INSTANCE/LoginName)[1]', 'sysname')
		  ,@LoginType = @data.value('(/EVENT_INSTANCE/LoginType)[1]', 'sysname')

	IF @LoginName='user1' and @AppName LIKE ('Microsoft SQL Server Management Studio%') --If it's SSMS
	BEGIN
		ROLLBACK; 
	END
	
	IF @allowed=false
	BEGIN
		INSERT INTO loginData(data, program_name) VALUES(@data, @AppName)
	END
END;
